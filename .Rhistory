greedy_more = rmse( y[valid_id], c(X[valid_id,] %*% greedy_more)),
popped = rmse( y[valid_id], c(X[valid_id,] %*% popped)),
popped_more = rmse( y[valid_id], c(X[valid_id,] %*% popped_more)),
comb_more = rmse( y[valid_id], c(X[valid_id,] %*% comb_more))
)
train_id <- sample(nrow(X), 0.7*nrow(X))
valid_id <- seq_len(nrow(X))[-train_id]
greedy <- greedy_stacker( y[train_id], X[train_id,])
greedy_more <- greedy_stacker( y[train_id], X[train_id,],
max_iter = 500 )
popped <- popping_stacker(y[train_id], X[train_id,])
popped_more <- popping_stacker(y[train_id], X[train_id,], 500)
comb_more <- popped_more
comb_more[comb_more > 0] <-
greedy_stacker(y[train_id], X[train_id,which(popped_more > 0)],
max_iter = 50)
c( greedy = rmse( y[valid_id], c(X[valid_id,] %*% greedy)),
greedy_more = rmse( y[valid_id], c(X[valid_id,] %*% greedy_more)),
popped = rmse( y[valid_id], c(X[valid_id,] %*% popped)),
popped_more = rmse( y[valid_id], c(X[valid_id,] %*% popped_more)),
comb_more = rmse( y[valid_id], c(X[valid_id,] %*% comb_more))
)
source("~/Desktop/stack/experiments/weird_stacking_test.R")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
source("~/Desktop/stack/experiments/weird_stacking_test.R")
source("~/Desktop/stack/experiments/weird_stacking_test.R")
tidyr::pivot_wider(validation, id_cols = c("name", "index")) %>%
dplyr::select(-index) %>%
as.matrix %>%
tsutils::nemenyi( plottype = "vmcb")
validation %>%
ggplot2::ggplot(ggplot2::aes(x = value, color = name)) +
ggplot2::geom_density()
tidyr::pivot_wider(validation, id_cols = c("name", "index")) %>%
dplyr::select(-index) %>%
as.matrix %>%
tsutils::nemenyi( plottype = "vmcb")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/utils.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
pkgload::load_all(compile = TRUE)
remove(list=ls())
library(magrittr)
devtools::document()
pkgload::load_all(compile = TRUE)
remove(list=ls())
library(magrittr)
Rcpp::sourceCpp("src/utils.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
exmpl <- readRDS("data/example_stacking_data.rds")
y <- exmpl$y
X <- exmpl$X
popping_stacker(y,Z )
popping_stacker(y,X )
popping_stacker(y,X )
popping_stacker(y,X, popping_rate = 0.1 )
10 - 2 /8
(10 - 2) /8
(10 - 2) /12
(10 - 2)*0.6666667
(10 - 2)/0.6666667
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
devtools::document
devtools::document}
devtools::document()
devtools::document()
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/utils.cpp")
Rcpp::sourceCpp("~/Desktop/stack/src/popping_stack.cpp")
Rcpp::sourceCpp("~/Desktop/stack/src/popping_stack.cpp")
Rcpp::sourceCpp("~/Desktop/stack/src/popping_stack.cpp")
Rcpp::sourceCpp("~/Desktop/stack/src/popping_stack.cpp")
Rcpp::sourceCpp("~/Desktop/stack/src/popping_stack.cpp")
Rcpp::sourceCpp("~/Desktop/stack/src/popping_stack.cpp")
popping_stacker(y,X, popping_rate = 0.1 )
exmpl <- readRDS("data/example_stacking_data.rds")
y <- exmpl$y
X <- exmpl$X
getwd()
getwd()
Rcpp::sourceCpp("src/popping_stack.cpp")
getwd()
exmpl <- readRDS("data/example_stacking_data.rds")
y <- exmpl$y
X <- exmpl$X
popping_stacker()
popping_stacker(y, X)
popping_stacker(y, X)
popping_stacker(y, X)
Rcpp::sourceCpp("src/popping_stack.cpp")
getwd()
devtools::document()
devtools::document()
devtools::document()
Rcpp::sourceCpp("~/Desktop/treecoding/src/sample_cpp.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/utils.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
exmpl <- readRDS("data/example_stacking_data.rds")
y <- exmpl$y
X <- exmpl$X
X[is.nan(X)] <- NA
popping_stacker(y, X)
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y, X)
popping_stacker(y, X)
popping_stacker(y, X)
popping_stacker(y, X)
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("~/Desktop/treecoding/src/sample_cpp.cpp")
Rcpp::sourceCpp("~/Desktop/treecoding/src/sample_cpp.cpp")
Rcpp::sourceCpp("~/Desktop/treecoding/src/sample_cpp.cpp")
Rcpp::sourceCpp("~/Desktop/treecoding/src/sample_cpp.cpp")
Rcpp::sourceCpp("~/Desktop/treecoding/src/sample_cpp.cpp")
Rcpp::sourceCpp("src/sample_cpp.cpp")
a <- rnorm(10)
b <- c(1,2,5,7,9)
wrap2(a,b)
a
Rcpp::sourceCpp("src/sample_cpp.cpp")
wrap3( a, b, 5 )
a
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X)
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X)
popping_stacker(y,X) %>% length
library(magrittr)
popping_stacker(y,X) %>% length
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X) %>% length
popping_stacker(y,X)
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X)
exmpl <- readRDS("data/example_stacking_data.rds")
y <- exmpl$y
X <- exmpl$X
X[is.nan(X)] <- NA
popping_stacker(y,X)
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X)
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X)
popping_stacker(y,X)
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X)
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X)
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X)
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X)
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X)
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X)
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X)
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X)
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X)
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X)
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X)
Rcpp::sourceCpp("src/sample_cpp.cpp")
Rcpp::sourceCpp("src/sample_cpp.cpp")
wrap4( a, 3 )
a
wrap4( a, 3 )
wrap4( a, 3 )
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X)
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X)
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X)
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X)
popping_stacker(y,X) %>% length
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X) %>% length
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X) %>% length
popping_stacker(y,X)
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X)
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X)
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X)
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X)
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X)
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X)
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X)
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X)
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X)
Rcpp::sourceCpp("src/popping_stack.cpp")
popping_stacker(y,X)
popping_stacker(y,X)
popping_stacker(y,X)
popping_stacker(y,X)
source("~/Desktop/stack/experiments/popping_stacking_benchmark.R")
devtools::document()
remove(list=ls())
devtools::document()
Rcpp::sourceCpp("src/utils.cpp")
devtools::document()
source("~/Desktop/stack/experiments/popping_stacking_benchmark.R")
source("~/Desktop/stack/experiments/popping_stacking_benchmark.R")
speed_bench
speed_bench %>% dplyr::filter(smpl == 10000)
pkgload::load_all(compile = TRUE)
remove(list=ls())
library(magrittr)
exmpl <- readRDS("data/example_stacking_data.rds")
y <- exmpl$y
X <- exmpl$X
tolerant_check <- purrr::partial( all.equal, tolerance = 0.01 )
# smpl = 10
rmse_stack <- function(true, predicted) {
sqrt(mean((#stats::na.omit(
true - predicted#)
)^2))
}
mse_stack <- function(true, predicted) {
mean((#stats::na.omit(
true - predicted#)
)^2)
}
mae_stack <- function(true, predicted) {
mean(abs(stats::na.omit(true - predicted)))
}
# greedy stacking of models, or determining model weights greedily using
# arbitrary metrics
# see: https://bmcresnotes.biomedcentral.com/articles/10.1186/s13104-020-4931-7
greedy_stacker_r <- function(y, Z, metric = rmse_stack, criterium_better = which.min, max_iter = 100) {
# s in the original paper
step <- 0
# x in the original paper
evaluations <- rep(0, ncol(Z))
P <- rep(0, nrow(Z))
weights <- rep(0, ncol(Z))
while (TRUE) {
step <- step + 1
for (col in seq_len(ncol(Z))) {
evaluations[col] <- metric(y, (P + Z[, col]) / step)
}
eval_max <- criterium_better(evaluations)
# they use an X[,j_max] in the original paper, but I am 99.9%
# sure they actually mean Z instead of X (since there is no X in the
# algorithm anywhere, and Z actually makes sense)
P <- P + Z[, eval_max]
# update weights
weights[eval_max] <- weights[eval_max] + 1
# they do not go into more detail on the convergence criterion so maybe it
# can be improved further
if (step > max_iter) {
break
}
print(paste0(step,"\n"))
}
return(weights / step)
}
pkgload::load_all(compile = TRUE)
remove(list=ls())
library(magrittr)
exmpl <- readRDS("data/example_stacking_data.rds")
y <- exmpl$y
X <- exmpl$X
rmse <- function(true, predicted) {
sqrt(mean((true - predicted)^2, na.rm = TRUE))
}
popping_stacker_r <- function( y, X, max_iterations = 100, popping = 0.03 ) {
weights <- rep(1, ncol(X))/ncol(X)
prediction <- c(rowSums(X * weights, na.rm = TRUE))
error <- rmse( y, prediction )
used_weights <- seq_len(ncol(X))
start_error <- error
for(i in seq_len(max_iterations)) {
# screw around the weights a bit
nonzero_weights <- intersect( used_weights,
sample( used_weights,
length(used_weights)*(1 - popping)
)
)
if( length(nonzero_weights)  < 1) {
break;
}
# rescale
new_weights <- weights[ nonzero_weights ]
new_weights <- new_weights/sum(new_weights)
# new prediction
new_prediction <- c(rowSums(as.matrix(X[, nonzero_weights] * new_weights), na.rm = TRUE))
new_error <- rmse( y, new_prediction )
if( new_error < error ) {
used_weights <- nonzero_weights
error <- new_error
}
}
weights <- rep(1, ncol(X))
weights[-used_weights] <- 0
weights <- weights/sum(weights)
return(weights)
}
popping_stacker(y, X)
popping_stacker_r(y, X)
popping_stacker_r <- function( y, X, max_iterations = 100, popping = 0.03 ) {
weights <- rep(1, ncol(X))/ncol(X)
prediction <- c(rowSums(X * weights, na.rm = TRUE))
error <- rmse( y, prediction )
used_weights <- seq_len(ncol(X))
start_error <- error
for(i in seq_len(max_iterations)) {
# screw around the weights a bit
nonzero_weights <- intersect( used_weights,
sample( used_weights,
length(used_weights)*(1 - popping)
)
)
if( length(nonzero_weights)  < 1) {
break;
}
# rescale
new_weights <- weights[ nonzero_weights ]
new_weights <- new_weights/sum(new_weights)
# new prediction
new_prediction <- c(rowSums(as.matrix(X[, nonzero_weights] * new_weights), na.rm = TRUE))
new_error <- rmse( y, new_prediction )
if( new_error < error ) {
used_weights <- nonzero_weights
error <- new_error
}
print(paste0(step,"\n"))
}
weights <- rep(1, ncol(X))
weights[-used_weights] <- 0
weights <- weights/sum(weights)
return(weights)
}
popping_stacker_r(y, X)
popping_stacker_r <- function( y, X, max_iterations = 100, popping = 0.03 ) {
weights <- rep(1, ncol(X))/ncol(X)
prediction <- c(rowSums(X * weights, na.rm = TRUE))
error <- rmse( y, prediction )
used_weights <- seq_len(ncol(X))
start_error <- error
for(i in seq_len(max_iterations)) {
# screw around the weights a bit
nonzero_weights <- intersect( used_weights,
sample( used_weights,
length(used_weights)*(1 - popping)
)
)
if( length(nonzero_weights)  < 1) {
break;
}
# rescale
new_weights <- weights[ nonzero_weights ]
new_weights <- new_weights/sum(new_weights)
# new prediction
new_prediction <- c(rowSums(as.matrix(X[, nonzero_weights] * new_weights), na.rm = TRUE))
new_error <- rmse( y, new_prediction )
if( new_error < error ) {
used_weights <- nonzero_weights
error <- new_error
}
print(paste0(i,"\n"))
}
weights <- rep(1, ncol(X))
weights[-used_weights] <- 0
weights <- weights/sum(weights)
return(weights)
}
popping_stacker_r(y, X)
popping_stacker_r <- function( y, X, max_iterations = 100, popping = 0.03 ) {
weights <- rep(1, ncol(X))/ncol(X)
prediction <- c(rowSums(X * weights, na.rm = TRUE))
error <- rmse( y, prediction )
used_weights <- seq_len(ncol(X))
start_error <- error
for(i in seq_len(max_iterations)) {
# screw around the weights a bit
nonzero_weights <- intersect( used_weights,
sample( used_weights,
length(used_weights)*(1 - popping)
)
)
if( length(nonzero_weights)  < 1) {
break;
}
# rescale
new_weights <- weights[ nonzero_weights ]
new_weights <- new_weights/sum(new_weights)
# new prediction
new_prediction <- c(rowSums(as.matrix(X[, nonzero_weights] * new_weights), na.rm = TRUE))
new_error <- rmse( y, new_prediction )
if( new_error < error ) {
used_weights <- nonzero_weights
error <- new_error
}
print(i)
}
weights <- rep(1, ncol(X))
weights[-used_weights] <- 0
weights <- weights/sum(weights)
return(weights)
}
popping_stacker_r(y, X)
popping_stacker(y, X)
popping_stacker_r(y, X)
popping_stacker(y, X)
source("~/Desktop/stack/experiments/popping_stacking_benchmark.R")
speed_bench
speed_bench %>% dplyr::filter(smpl == 10000)
Rcpp::sourceCpp("src/popping_stack.cpp")
source("~/Desktop/stack/experiments/popping_stacking_benchmark.R")
Rcpp::sourceCpp("src/test.cpp")
Rcpp::sourceCpp("src/test.cpp")
Rcpp::sourceCpp("src/test.cpp")
Rcpp::sourceCpp("src/test.cpp")
Rcpp::sourceCpp("src/test.cpp")
Rcpp::sourceCpp("src/test.cpp")
Rcpp::sourceCpp("src/test.cpp")
sample_from_seq(10, 1)
sample_from_seq(10, 1)
sample_from_seq(10, 5)
sample_from_seq(10, 5)
sample_from_seq(10, 5)
sample_from_seq(10, 5)
sample_from_seq(10, 5)
sample_from_seq(10, 5)
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/utils.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/test.cpp")
Rcpp::sourceCpp("src/test.cpp")
Rcpp::sourceCpp("src/test.cpp")
Rcpp::sourceCpp("src/test.cpp")
Rcpp::sourceCpp("src/test.cpp")
Rcpp::sourceCpp("src/test.cpp")
Rcpp::sourceCpp("src/test.cpp")
Rcpp::sourceCpp("src/test.cpp")
Rcpp::sourceCpp("src/test.cpp")
Rcpp::sourceCpp("src/test.cpp")
Rcpp::sourceCpp("src/test.cpp")
Rcpp::sourceCpp("src/test.cpp")
Rcpp::sourceCpp("src/test.cpp")
Rcpp::sourceCpp("src/test.cpp")
Rcpp::sourceCpp("src/test.cpp")
Rcpp::sourceCpp("src/test.cpp")
intersect_fast(1:10, 1:5)
intersect_fast2(1:10, 1:5)
Rcpp::sourceCpp("src/popping_stack.cpp")
devtools::document()
devtools::document()
devtools::document()
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
Rcpp::sourceCpp("src/popping_stack.cpp")
pkgload::load_all(compile = TRUE)
pkgload::load_all(compile = TRUE)
