// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// greedy_stacker
Eigen::VectorXf greedy_stacker(Eigen::VectorXf y, Eigen::MatrixXf Z, const char metric, const int& max_iter);
RcppExport SEXP _stack_greedy_stacker(SEXP ySEXP, SEXP ZSEXP, SEXP metricSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXf >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXf >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const char >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< const int& >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(greedy_stacker(y, Z, metric, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// popping_stacker
Eigen::VectorXf popping_stacker(Eigen::VectorXf y, Eigen::MatrixXf Z, const char metric, const int& max_iter, const float& popping_rate);
RcppExport SEXP _stack_popping_stacker(SEXP ySEXP, SEXP ZSEXP, SEXP metricSEXP, SEXP max_iterSEXP, SEXP popping_rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXf >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXf >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const char >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< const int& >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const float& >::type popping_rate(popping_rateSEXP);
    rcpp_result_gen = Rcpp::wrap(popping_stacker(y, Z, metric, max_iter, popping_rate));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_stack_greedy_stacker", (DL_FUNC) &_stack_greedy_stacker, 4},
    {"_stack_popping_stacker", (DL_FUNC) &_stack_popping_stacker, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_stack(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
